generator client {
  provider = "prisma-client-js"
}

//generator dbml {
//  provider            = "prisma-dbml-generator"
//  output              = "../dbml"
//  outputName          = "minhdu.dbml"
//  projectName         = "Minh du"
//  projectDatabaseType = "PostgreSQL"
//  projectNote         = "Test project description"
//}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id        Int       @id @default(autoincrement())
  username  String    @unique
  password  String
  branch    Branch?   @relation(fields: [branchId], references: [id])
  branchId  Int?
  role      Role
  appName   AppEnum?
  timestamp DateTime? @default(now())
}

model Degree {
  id         Int           @id @default(autoincrement())
  school     String
  type       DegreeType
  startedAt  DateTime
  endedAt    DateTime
  major      String
  formality  FormalityType
  level      DegreeLevel?
  status     DegreeStatus
  note       String?
  employee   Employee      @relation(fields: [employeeId], references: [id])
  employeeId Int
  timestamp  DateTime?     @default(now())
}

model Bank {
  id         Int       @id @default(autoincrement())
  stk        String?
  owner      String
  name       String
  employee   Employee  @relation(fields: [employeeId], references: [id])
  employeeId Int
  timestamp  DateTime? @default(now())
}

//Quốc gia
model Nation {
  id        Int        @id @default(autoincrement())
  code      String
  name      String
  provinces Province[]
}

model Province {
  id           Int        @id @default(autoincrement())
  code         Int        @unique
  codename     String     @unique
  divisionType String
  phoneCode    Int
  name         String
  nation       Nation     @relation(fields: [nationId], references: [id])
  nationId     Int
  districts    District[]
}

model District {
  id           Int      @id @default(autoincrement())
  code         Int
  codename     String
  divisionType String
  name         String
  province     Province @relation(fields: [provinceId], references: [id])
  provinceId   Int
  wards        Ward[]
}

model Ward {
  id           Int        @id @default(autoincrement())
  code         Int
  codename     String
  divisionType String
  name         String
  district     District   @relation(fields: [districtId], references: [id])
  districtId   Int
  employees    Employee[]
  customers    Customer[]
  relatives    Relative[]
  orders       Order[]
}

model Branch {
  id               Int                @id @default(autoincrement())
  code             String?            @unique
  name             String             @unique
  medicine         Medicine[]
  cccount          Account[]
  positions        Position[]
  employee         Employee[]
  OvertimeTemplate OvertimeTemplate[]
  timestamp        DateTime?          @default(now())
}

model Position {
  id             Int                @id @default(autoincrement())
  name           String             @unique
  workday        Int?
  branches       Branch[]
  employees      Employee[]
  templates      OvertimeTemplate[]
  Holiday        Holiday[]
  basicTemplates BasicTemplate[]
  timestamp      DateTime?          @default(now())
}

// Hợp đồng
model Contract {
  id         Int           @id @default(autoincrement())
  contractId String?
  type       ContractType? @default(LIMITED)
  name       String?
  position   String
  createdAt  DateTime
  expiredAt  DateTime?
  employee   Employee      @relation(fields: [employeeId], references: [id])
  employeeId Int
  timestamp  DateTime?     @default(now())
}

model Employee {
  id           Int         @id @default(autoincrement())
  code         String?     @unique
  firstName    String
  lastName     String
  avt          String?
  gender       GenderType
  phone        String?
  workPhone    String?
  birthday     DateTime
  birthplace   String?
  identify     String?     @unique
  idCardAt     DateTime?
  issuedBy     String?
  workday      Int
  ward         Ward        @relation(fields: [wardId], references: [id])
  wardId       Int
  address      String
  email        String?
  religion     String?
  ethnicity    String?
  mst          String?
  createdAt    DateTime?   @default(now()) //Ngày thử việc (vào làm)
  workedAt     DateTime? //Ngày làm chính thức
  leftAt       DateTime?
  isFlatSalary Boolean?    @default(false)
  position     Position    @relation(fields: [positionId], references: [id])
  positionId   Int
  branch       Branch      @relation(fields: [branchId], references: [id])
  branchId     Int
  note         String?
  facebook     String?
  zalo         String?
  recipeType   RecipeType? @default(CT2)
  banks        Bank[]
  routes       Route[]
  payrolls     Payroll[]
  contracts    Contract[]
  degrees      Degree[]
  relatives    Relative[]
  timestamp    DateTime?   @default(now())
}

model Holiday {
  id           Int        @id @default(autoincrement())
  name         String?
  datetime     DateTime
  rate         Float?     @default(1)
  price        Float?
  // Nếu true là nó sẽ giới hạn bởi ngày làm thực tế + ngày lễ phải > ngày công chuẩn mới được nhân với hệ số ngày lễ. Nếu false thì dù có đi làm hay k thì vẫn được nhân hệ số
  // Hiện tại đang chỉ apply chi ngày tết
  isConstraint Boolean?   @default(true)
  positions    Position[]
  timestamp    DateTime?  @default(now())
}

model OvertimeTemplate {
  id        Int           @id @default(autoincrement())
  title     String
  type      SalaryType?   @default(OVERTIME)
  price     Float
  rate      Float?        @default(1)
  unit      DatetimeUnit? @default(HOUR)
  note      String?
  positions Position[]
  branch    Branch?       @relation(fields: [branchId], references: [id])
  branchId  Int?
  timestamp DateTime?     @default(now())

  @@unique([title, type, price, rate, unit, branchId])
}

model BasicTemplate {
  id         Int         @id @default(autoincrement())
  title      String?     @default("Lương cơ bản trích BH")
  price      Float
  type       SalaryType? @default(BASIC)
  position   Position?   @relation(fields: [positionId], references: [id])
  positionId Int?
  timestamp  DateTime?   @default(now())

  @@unique([title, price])
}

model Relative {
  id           Int               @id @default(autoincrement())
  firstName    String
  lastName     String
  gender       GenderType
  phone        String?
  workPhone    String?
  birthday     DateTime?
  birthplace   String?
  identify     String?           @unique
  idCardAt     DateTime?
  issuedBy     String?
  ward         Ward              @relation(fields: [wardId], references: [id])
  wardId       Int
  address      String?
  religion     String?
  ethnicity    String?
  mst          String?
  career       String?
  relationship RelationshipType?
  sos          Boolean?          @default(false)
  employee     Employee          @relation(fields: [employeeId], references: [id])
  employeeId   Int
  timestamp    DateTime?         @default(now())
}

model Customer {
  id               Int              @id @default(autoincrement())
  firstName        String
  lastName         String
  avt              String?
  gender           GenderType?
  phone            String
  workPhone        String?
  birthday         DateTime
  birthplace       String?
  identify         String?
  idCardAt         DateTime?
  issuedBy         String?
  ward             Ward?            @relation(fields: [wardId], references: [id])
  wardId           Int?
  address          String?
  email            String?
  religion         String?
  ethnicity        String?
  mst              String?
  type             CustomerType
  resource         CustomerResource
  isPotential      Boolean?         @default(false)
  note             String?
  orders           Order[]
  debt             Float?
  paymentHistories PaymentHistory[]
  timestamp        DateTime?        @default(now())
}

model PaymentHistory {
  id         Int           @id @default(autoincrement())
  paidAt     DateTime?     @default(now())
  currency   CurrencyUnit? @default(VND)
  payType    PaymentType?  @default(CASH)
  total      Float
  customer   Customer      @relation(fields: [customerId], references: [id])
  customerId Int
  note       String?
  order      Order         @relation(fields: [orderId], references: [id])
  orderId    Int
}

model Commodity {
  id      Int           @id @default(autoincrement())
  code    String
  name    String
  unit    CommodityUnit
  price   Float
  amount  Float
  gift    Float?        @default(0)
  more    Float         @default(0)
  order   Order?        @relation(fields: [orderId], references: [id])
  orderId Int?
}

model Order {
  id               Int              @id @default(autoincrement())
  customer         Customer         @relation(fields: [customerId], references: [id])
  customerId       Int
  createdAt        DateTime
  createdBy        String?
  explain          String?
  routes           Route[]
  commodities      Commodity[]
  wardId           Int?
  deliveredAt      DateTime?
  hide             Boolean?         @default(false)
  destination      Ward?            @relation(fields: [wardId], references: [id])
  paymentHistories PaymentHistory[]
}

model Route {
  id         Int        @id @default(autoincrement())
  name       String
  startedAt  DateTime
  endedAt    DateTime?
  employee   Employee?  @relation(fields: [employeeId], references: [id])
  employeeId Int?
  driver     String?
  garage     String?
  orders     Order[]
  bsx        String
  locations  Location[]
}

model Location {
  id        Int    @id @default(autoincrement())
  latitude  String
  longitude String
  routes    Route  @relation(fields: [routeId], references: [id])
  routeId   Int
}

model Salary {
  id         Int           @id @default(autoincrement())
  title      String
  type       SalaryType
  times      Float?
  price      Float?
  unit       DatetimeUnit? @default(DAY)
  rate       Float?        @default(1)
  datetime   DateTime?
  forgot     Boolean?      @default(false)
  note       String?
  payroll    Payroll?      @relation(fields: [payrollId], references: [id])
  payrollId  Int?
  salaryId   Int?
  allowance  Salary?       @relation("SalaryToAllowance", fields: [salaryId], references: [id])
  allowances Salary[]      @relation("SalaryToAllowance")
  timestamp  DateTime?     @default(now())
}

model Payroll {
  id             Int       @id @default(autoincrement())
  salaries       Salary[]
  employee       Employee  @relation(fields: [employeeId], references: [id])
  employeeId     Int
  accConfirmedAt DateTime?
  isEdit         Boolean?  @default(true)
  manConfirmedAt DateTime?
  paidAt         DateTime?
  actualWorkday  Float?
  createdAt      DateTime? @default(now()) // ngay tao phieu luong, phieu luong cua thang
  timestamp      DateTime? @default(now()) // ngay them vao ghi lai lich su
}

// start medicine

model Medicine {
  id        Int          @id @default(autoincrement())
  code      String
  barcode   String?
  name      String
  provider  String?
  expire    DateTime
  price     Float // đơn giá trên 1 sp
  discount  Float?
  invoice   String?
  unit      MedicineUnit
  amount    Float
  createdAt DateTime?    @default(now()) // ngayf nhap kho
  branch    Branch?      @relation(fields: [branchId], references: [id]) // kho tong, kho con
  branchId  Int?
}

//  CT1: apply cho công nhân trại chăn nuôi
//Điều kiện: Số ngày đi làm phải > số ngày công chuẩn. ( Nếu đi làm <= thì sẽ được tính lương bình thường)
// - sáp dụng cho công nhân trại chăn nuôi. Nếu đi làm trong ngày thường sẽ được tính lương x2.
// - Nếu đi làm trong ngày lễ thì sẽ được tính lương x3
// - Nếu ngày lễ nhưng đi làm nửa ngày và thoả mãn điều kiện thì sẽ được tính nửa ngày đi làm lương x3, và nửa ngày nghỉ trong ngày lễ sẽ được hưởng lương bình thường

enum RecipeType {
  CT1
  CT2
}

enum MedicineUnit {
  VIEN
  LO
  LIT
  KG
  BI
}

// end medicine

model SystemHistory {
  id          Int       @id @default(autoincrement())
  appName     AppEnum
  name        String
  activity    String
  description String
  ip          String?
  createdAt   DateTime? @default(now())
}

enum CurrencyUnit {
  VND
  USD
  EUR
  GBP
  MYR
  MMK
  CNY
  JPY
}

enum PaymentType {
  TRANSFER
  CASH
}

enum DegreeStatus {
  GRADUATED
  NOT_GRADUATED
}

enum ActivityType {
  UNKNOWN
  CREATE
  UPDATE
  PATCH
  FIND_ALL
  FIND_ONE
  DELETE
}

enum AppEnum {
  UNKNOWN
  HUMAN_RESOURCE
  SELL
  WAREHOUSE
}

enum RelationshipType {
  HUSBAND
  WIFE
  FATHER
  MOTHER
  DAUGHTER
  SON
}

enum CustomerType {
  RETAIL
  AGENCY
}

enum CommodityUnit {
  KG
  CON
}

enum CustomerResource {
  RESEARCH //nhân viên tự tìm
  INTRODUCED //Được giới thiệu
  SELF_FIND //khách hàng tự tìm đến
  OTHER //Khác
}

enum ContractType {
  LIMITED
  UNLIMITED
}

enum DegreeLevel {
  EXCELLENT
  GOOD
  AVERAGE
  BELOW_AVERAGE
}

enum DegreeType {
  UNIVERSITY //đại học
  COLLEGE //cao đẳng
  INTERMEDIATE //trung cấp
  MASTER //thạc sĩ
  PHILOSOPHY //tiến sĩ

}

enum FormalityType {
  FORMAL
  INFORMAL
  TRAINING
  REMOTE
}

enum SalaryType {
  BASIC
  BASIC_INSURANCE
  STAY
  ALLOWANCE // Phụ cấp thêm không ảnh hưởng tới ngày công
  OVERTIME //tăng ca, phụ cấp tăng ca
  ABSENT
  HOLIDAY // Ngày lế
  DAY_OFF // nghỉ được nghỉ
}

enum DatetimeUnit {
  MINUTE
  HOUR
  DAY
  MONTH
}

enum GenderType {
  MALE
  FEMALE
  OTHER
}

enum Role {
  ADMIN
  CHIEF_ACCOUNTANT
  ACCOUNTANT_CASH_FUND // Quy tien mat
  ACCOUNTANT_MODERATION
  SALESMAN // ban hang
  SALESMAN_EGG // ban trung
  IMPORTER_EXPORTER // xuat nhap khau
  CONSTRUCTION_DEPARTMENT //cong trinh
  HUMAN_RESOURCE
  CAMP_ACCOUNTING // ke toan
  CAMP_MANAGER // quan ly trai
  CAMP_DIRECTOR //giam doc trai
  HATCHERY_ACCOUNTING // ke toan trai ap
  HATCHERY_MANAGEMENT // quan ly trai ap
  NONE // deo co chuc vu
}
