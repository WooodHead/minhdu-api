generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id       Int       @id @default(autoincrement())
  username String    @unique
  password String
  role     Role
  branch   Branch?
}

model Branch {
  id          String       @id
  name        String       @unique
  employees   Employee[]
  departments Department[]
  accountId   Int
  account     Account      @relation(fields: [accountId], references: [id])
}

model Department {
  id        Int        @id @default(autoincrement())
  name      String     @unique
  color     String     @unique
  employee  Employee[]
  branchId  String
  branch    Branch     @relation(fields: [branchId], references: [id])
  positions Position[]
}

model Position {
  id          Int          @id @default(autoincrement())
  name        String
  workday     Int
  employees   Employee[]
  departmentId Int
  department  Department   @relation(fields: [departmentId], references: [id])
  @@unique([name, departmentId])
}

model Employee {
  id           String     @id
  identify     String
  name         String
  gender       GenderType
  birthday     DateTime
  phone        String
  email        String?
  workedAt     DateTime?
  leftAt       DateTime?
  idCardAt     DateTime
  address      String
  certificate  String?
  stayedAt     DateTime?
  contractAt   DateTime?
  note         String?
  qrCode       String?
  isFlatSalary Boolean    @default(false)
  branchId     String
  branch       Branch     @relation(fields: [branchId], references: [id])
  departmentId Int
  department   Department @relation(fields: [departmentId], references: [id])
  positionId   Int
  position     Position   @relation(fields: [positionId], references: [id])
  payrolls     Payroll[]
  salaries     Salary[]

  @@unique([id, identify], name: "Employee.id_identify_unique")
}

model Salary {
  id         Int        @id @default(autoincrement())
  title      String?
  type       SalaryType @default(BASIC)
  datetime   DateTime?
  times      Float?
  rate       Float?     @default(1)
  price      Float?
  forgot     Boolean?   @default(false)
  note       String?
  payrollId  Int?
  employeeId String?
  employee   Employee?  @relation(fields: [employeeId], references: [id])
  payroll    Payroll?   @relation(fields: [payrollId], references: [id])

  @@unique([title, type, times, rate, price], name: "Salary.title_type_times_rate_price_unique")
}

model Payroll {
  id          Int       @id @default(autoincrement())
  employeeId  String
  isEdit      Boolean   @default(true)
  confirmedAt DateTime?
  paidAt      DateTime?
  createdAt   DateTime  @default(now())
  employee    Employee  @relation(fields: [employeeId], references: [id])
  salaries    Salary[]
}

enum SalaryType {
  BASIC
  ALLOWANCE_STAYED
  ALLOWANCE
  OVERTIME
  ABSENT
  LATE
}

enum GenderType {
  MALE
  FEMALE
  OTHER
}

enum Role {
  ADMIN
  CHIEF_ACCOUNTANT
  ACCOUNTANT_CASH_FUND
  ACCOUNTANT_MODERATION
  SALESMAN
  SALESMAN_EGG
  IMPORTER_EXPORTER
  CONSTRUCTION_DEPARTMENT
  HUMAN_RESOURCE
  CAMP_ACCOUNTING
  CAMP_MANAGEMENT
  CAMP_DIRECTOR
  HATCHERY_ACCOUNTING
  HATCHERY_MANAGEMENT
  NONE
}
