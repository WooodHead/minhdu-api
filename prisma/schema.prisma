generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id       Int       @id @default(autoincrement())
  username String    @unique
  password String
  role     Role
  employee Employee?
}

model Branch {
  id          String       @id
  name        String       @unique
  departments Department[]
  employees   Employee[]
}

model Department {
  id        Int                    @id @default(autoincrement())
  name      String                 @unique
  color     String                 @unique
  branches  Branch[]
  positions Position[]
  employee  Employee[]
}

model Position {
  id          Int                    @id @default(autoincrement())
  name        String                 @unique
  employees   Employee[]
  departments Department[]
}

model Employee {
  id           String     @id
  identify     String
  accountId    Int?
  account      Account?   @relation(fields: [accountId], references: [id])
  name         String
  gender       GenderType
  birthday     DateTime
  phone        String
  email        String?
  branchId     String
  branch       Branch     @relation(fields: [branchId], references: [id])
  departmentId Int
  department   Department @relation(fields: [departmentId], references: [id])
  positionId   Int
  position     Position   @relation(fields: [positionId], references: [id])
  payrolls     Payroll[]
  workedAt     DateTime?
  leftAt       DateTime?
  idCardAt     DateTime
  address      String
  certificate  String?
  stayedAt     DateTime?
  contractAt   DateTime?
  note         String?
  qrCode       String?
  isFlatSalary Boolean    @default(false)
  salaries     Salary[]

  @@unique([id, identify])
}

model Salary {
  id         Int        @id @default(autoincrement())
  title      String?
  type       SalaryType @default(BASIC)
  datetime   DateTime?
  times      Float?
  rate       Float?     @default(1)
  price      Float?
  forgot     Boolean?   @default(false)
  note       String?
  payrollId  Int?
  payroll    Payroll?   @relation(fields: [payrollId], references: [id])
  employeeId String?
  employee   Employee?  @relation(fields: [employeeId], references: [id])

  @@unique([title, type, times, rate, price])
}

model Payroll {
  id          Int       @id @default(autoincrement())
  employeeId  String
  employee    Employee? @relation(fields: [employeeId], references: [id])
  salaries    Salary[]
  isEdit      Boolean   @default(true)
  confirmedAt DateTime?
  paidAt      DateTime?
  createdAt   DateTime  @default(now())
}

enum SalaryType {
  //Lương cơ bản bắt buộc
  BASIC
  // Nếu
  //Phụ cấp ở lại: Nếu ngày làm thực tế < ngày chuẩn thì cộng vào khoảng này để chia ra giá 1 ngày công rồi nhân với ngày công thực tế
  ALLOWANCE_STAYED
  //Phụ cấp cơm các thứ. không ảnh hướng tới lương 1 ngày, tăng ca theo giờ + giá tiền
  ALLOWANCE
  //Tăng ca theo ngày
  OVERTIME
  ABSENT
  LATE
}

enum GenderType {
  MALE
  FEMALE
  OTHER
}

enum Role {
  ADMIN
  CHIEF_ACCOUNTANT
  ACCOUNTANT_CASH_FUND
  ACCOUNTANT_MODERATION
  SALESMAN
  SALESMAN_EGG
  IMPORTER_EXPORTER
  CONSTRUCTION_DEPARTMENT
  HUMAN_RESOURCE
  CAMP_ACCOUNTING
  CAMP_MANAGEMENT
  CAMP_DIRECTOR
  HATCHERY_ACCOUNTING
  HATCHERY_MANAGEMENT
  NONE
}
