generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id         Int     @id @default(autoincrement())
  username   String  @unique
  password   String
  role       Role
  employee   Employee?
}

model Branch {
  id          Int           @id @default(autoincrement())
  code        String?
  name        String        @unique
  departments Department[]
  employees   Employee[]
}

model Department {
  id        Int        @id @default(autoincrement())
  name      String     @unique
  color     String     @unique
  branchId  Int
  branch    Branch     @relation(fields: [branchId], references: [id])
  employee  Employee[]
  positions Position[]
}

model Position {
  id           Int        @id @default(autoincrement())
  name         String
  departmentId Int
  workday      Int
  department   Department @relation(fields: [departmentId], references: [id])
  employees    Employee[]

  @@unique([name, departmentId])
}

model Employee {
  id           Int        @id @default(autoincrement())
  code         String
  identify     String
  name         String
  avt          String?    @default("https://ibb.co/2ydP38t")
  gender       GenderType
  birthday     DateTime
  phone        String
  email        String?
  branchId     Int
  departmentId Int
  positionId   Int
  workedAt     DateTime?
  leftAt       DateTime?
  idCardAt     DateTime
  address      String
  certificate  String?
  stayedAt     DateTime?
  contractAt   DateTime?
  note         String?
  qrCode       String?
  isFlatSalary Boolean    @default(false)
  branch       Branch     @relation(fields: [branchId], references: [id])
  department   Department @relation(fields: [departmentId], references: [id])
  position     Position   @relation(fields: [positionId], references: [id])
  accountId    Int?
  account      Account?    @relation(fields: [accountId], references: [id])
  payrolls     Payroll[]
  salaries     Salary[]

  @@unique([id, identify])
}

model Salary {
  id         Int        @id @default(autoincrement())
  title      String?
  type       SalaryType @default(BASIC)
  datetime   DateTime?
  times      Float?     @default(1)
  rate       Float?     @default(1)
  price      Float?
  forgot     Boolean?   @default(false)
  note       String?
  employeeId Int?
  employee   Employee?  @relation(fields: [employeeId], references: [id])
  payroll    Payroll[]
}

model Payroll {
  id          Int       @id @default(autoincrement())
  employeeId  Int
  isEdit      Boolean   @default(true)
  confirmedAt DateTime?
  paidAt      DateTime?
  createdAt   DateTime  @default(now())
  employee    Employee  @relation(fields: [employeeId], references: [id])
  salaries    Salary[]
}

enum SalaryType {
  BASIC
  ALLOWANCE_STAYED
  ALLOWANCE
  OVERTIME
  ABSENT
  LATE
}

enum GenderType {
  MALE
  FEMALE
  OTHER
}

enum Role {
  ADMIN
  CHIEF_ACCOUNTANT
  ACCOUNTANT_CASH_FUND
  ACCOUNTANT_MODERATION
  SALESMAN
  SALESMAN_EGG
  IMPORTER_EXPORTER
  CONSTRUCTION_DEPARTMENT
  HUMAN_RESOURCE
  CAMP_ACCOUNTING
  CAMP_MANAGEMENT
  CAMP_DIRECTOR
  HATCHERY_ACCOUNTING
  HATCHERY_MANAGEMENT
  NONE
}
